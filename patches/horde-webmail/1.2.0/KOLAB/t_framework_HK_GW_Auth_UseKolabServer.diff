From: Gunnar Wrobel <p@rdus.de>
Subject: [PATCH] t/framework/HK/GW/Auth/UseKolabServer

Support adding users and switch over to using Kolab_Server (and LDAP).

Signed-off-by: Gunnar Wrobel <p@rdus.de>

---
 horde-webmail/lib/Horde/Auth/kolab.php        |   71 +++++++++++++++++--------
 horde-webmail/lib/Horde/Kolab/Server/test.php |    7 ++-
 horde-webmail/lib/Horde/Kolab/Session.php     |    7 +--
 3 files changed, 57 insertions(+), 28 deletions(-)

diff --git a/horde-webmail/lib/Horde/Auth/kolab.php b/horde-webmail/lib/Horde/Auth/kolab.php
index 235e72a..b790c1e 100644
--- a/horde-webmail/lib/Horde/Auth/kolab.php
+++ b/horde-webmail/lib/Horde/Auth/kolab.php
@@ -1,7 +1,5 @@
 <?php
 
-require_once 'Horde/Auth/imap.php';
-
 /**
  * Kolab implementation of the Horde authentication system. Derives from the
  * Auth_imap IMAP authentication object, and simply provides parameters to it
@@ -18,7 +16,7 @@ require_once 'Horde/Auth/imap.php';
  * @since   Horde 1.3
  * @package Horde_Auth
  */
-class Auth_kolab extends Auth_imap {
+class Auth_kolab extends Auth {
 
     /**
      * An array of capabilities, so that the driver can report which
@@ -26,7 +24,7 @@ class Auth_kolab extends Auth_imap {
      *
      * @var array
      */
-    var $capabilities = array('add'           => false,
+    var $capabilities = array('add'           => true,
                               'update'        => false,
                               'resetpassword' => false,
                               'remove'        => false,
@@ -39,7 +37,7 @@ class Auth_kolab extends Auth_imap {
      *
      * @param string $userId      The userId to check.
      * @param array $credentials  An array of login credentials. For Kolab,
-     *                            this must contain a password entry.
+     *                            this must contain a "password" entry.
      *
      * @return boolean  Whether or not the credentials are valid.
      */
@@ -52,12 +50,9 @@ class Auth_kolab extends Auth_imap {
         @include_once 'Horde/Kolab/Session.php';
 
         if (class_exists('Horde_Kolab_Session')) {
-            $session = &Horde_Kolab_Session::singleton($userId);
-            $userId = $session->user_mail;
-            $params = $session->getImapParams();
-            if (is_a($params, 'PEAR_Error')) {
-                $this->_setAuthError(AUTH_REASON_MESSAGE, $params->getMessage());
-                return false;
+            $session = &Horde_Kolab_Session::singleton($userId, $credentials, true);
+            if (is_a($session->auth, 'PEAR_Error')) {
+                $this->_setAuthError(AUTH_REASON_MESSAGE, $session->auth->getMessage());
             }
         } else {
             $this->_setAuthError(AUTH_REASON_MESSAGE,
@@ -65,18 +60,14 @@ class Auth_kolab extends Auth_imap {
             return false;
         }
 
-        $this->_setParams($params);
-
-        $login_ok = parent::_authenticate($userId, $credentials);
-
         if ($conf['auth']['params']['login_block'] != 1) {
             // Return if feature is disabled.
-            return $login_ok;
+            return $session->auth;
         }
 
         @include_once 'Horde/History.php';
 
-        if (class_exists('Horde_History')) {
+        if ($session->auth !== true && class_exists('Horde_History')) {
             $history = &Horde_History::singleton();
 
             $history_identifier = "$userId@logins.kolab";
@@ -132,7 +123,7 @@ class Auth_kolab extends Auth_imap {
             }
         }
 
-        return $login_ok;
+        return $session->auth === true;
     }
 
     /**
@@ -167,10 +158,14 @@ class Auth_kolab extends Auth_imap {
      */
     function listUsers()
     {
-        @include_once 'Horde/Kolab/Server.php';
+        @include_once 'Horde/Kolab/Session.php';
 
-        if (class_exists('Horde_Kolab_Server')) {
-            $server = Horde_Kolab_Server::singleton();
+        if (class_exists('Horde_Kolab_Session')) {
+            $session = &Horde_Kolab_Session::singleton();
+            $server = $session->getServer();
+            if (is_a($server, 'PEAR_Error')) {
+                return $server;
+            }
             $users = $server->listObjects(KOLAB_OBJECT_USER);
             $mails = array();
             foreach ($users as $user) {
@@ -178,7 +173,39 @@ class Auth_kolab extends Auth_imap {
             }
             return $mails;
         } else {
-            return PEAR::raiseError("The class \"Horde_Kolab_Server\" is not available.");
+            return PEAR::raiseError("The class \"Horde_Kolab_Session\" is not available.");
+        }
+    }
+
+    /**
+     * Add a set of authentication credentials.
+     *
+     * @param string $userId      The userId to add.
+     * @param array $credentials  The credentials to be set.
+     *
+     * @return boolean|PEAR_Error  True on success.
+     */
+    function addUser($userId, $credentials)
+    {
+        @include_once 'Horde/Kolab/Session.php';
+
+        if (class_exists('Horde_Kolab_Session')) {
+            $session = &Horde_Kolab_Session::singleton();
+            $server = $session->getServer();
+            if (is_a($server, 'PEAR_Error')) {
+                return $server;
+            }
+            $result = $server->store(KOLAB_OBJECT_USER, $userId, $credentials);
+            if (is_a($result, KOLAB_OBJECT_USER)) {
+                return true;
+            } else if (is_a($result, 'PEAR_Error')) {
+                return $result;
+            } else {
+                return PEAR::raiseError(sprintf('The new Kolab object is a %s rather than a ' . KOLAB_OBJECT_USER,
+                                                get_class($result)));
+            }
+        } else {
+            return PEAR::raiseError("The class \"Horde_Kolab_Session\" is not available.");
         }
     }
 }
diff --git a/horde-webmail/lib/Horde/Kolab/Server/test.php b/horde-webmail/lib/Horde/Kolab/Server/test.php
index 6f8a237..6565bbc 100644
--- a/horde-webmail/lib/Horde/Kolab/Server/test.php
+++ b/horde-webmail/lib/Horde/Kolab/Server/test.php
@@ -125,21 +125,24 @@ class Horde_Kolab_Server_test extends Horde_Kolab_Server_ldap {
 
             $data = $this->_read($dn, $attrs = array('userPassword'));
             if (is_a($data, 'PEAR_Error')) {
+                $this->_bound = false;
                 return $data;
             }
             if (!isset($data['userPassword'])) {
+                $this->_bound = false;
                 return PEAR::raiseError('User has no password entry!');
             }
-            $this->_bound = $data['userPassword'][0] = $pw;
+            $this->_bound = $data['userPassword'][0] == $pw;
             if (!$this->_bound) {
                 return PEAR::raiseError('Incorrect password!');
             }
         } else if ($this->_params['no_anonymous_bind']) {
+            $this->_bound = false;
             return PEAR::raiseError('Anonymous bind is not allowed!');
         } else {
             $this->_bound = true;
         }
-        return true;
+        return $this->_bound;
     }
 
     /**
diff --git a/horde-webmail/lib/Horde/Kolab/Session.php b/horde-webmail/lib/Horde/Kolab/Session.php
index 7c73496..616b285 100644
--- a/horde-webmail/lib/Horde/Kolab/Session.php
+++ b/horde-webmail/lib/Horde/Kolab/Session.php
@@ -129,7 +129,7 @@ class Horde_Kolab_Session {
                         $this->user_mail = $result;
                     }
 
-                    $result = $user_object->get(KOLAB_ATTR_UID);
+                    $result = $user_object->get(KOLAB_ATTR_SID);
                     if (!empty($result) && !is_a($result, 'PEAR_Error')) {
                         $this->user_id = $result;
                     }
@@ -209,7 +209,6 @@ class Horde_Kolab_Session {
                 $params['pass'] = $credentials['password'];
             }
         }
-
         return Horde_Kolab_Server::singleton($params);
     }
 
@@ -242,7 +241,7 @@ class Horde_Kolab_Session {
      *
      * @return Horde_Kolab_Session  The concrete Session reference.
      */
-    function &singleton($user = null, $credentials = null)
+    function &singleton($user = null, $credentials = null, $destruct = false)
     {
         static $session;
 
@@ -258,7 +257,7 @@ class Horde_Kolab_Session {
             $session = $hs->query('kolab_session');
         }
 
-        if (empty($session)
+        if ($destruct || empty($session)
             || (!empty($user) &&  $user != $session->user_mail
                 && $user != $session->user_id)) {
             $session = new Horde_Kolab_Session($user, $credentials);
-- 
tg: (a00ff66..) t/framework/HK/GW/Auth/UseKolabServer (depends on: t/framework/HK/GW/Kolab_Storage/CatchPossibleError)
-- 
TOPGIT patch commit log
=======================

commit a92d02c65183a8af5418101133be2c8df95e705a
Author: Gunnar Wrobel <p@rdus.de>
Date:   Fri Jan 30 23:20:41 2009 +0000

    Added patch release/HK-GW-Auth-Use_Kolab_Server.patch from the mercurial release queue.
