From: root <Gunnar Wrobel wrobel@pardus.de>
Subject: [PATCH] t/SyncML/HK/GW/DoubleSyncFix

When the uid validity of an IMAP folder changes this confuses the Kolab storage
driver and leads to double entries. The attached patch has been proposed by
Univention and should be applied after some cleanup.

REF: https://issues.kolab.org/issue3238

Horde is currently agnostic of external clients to the storage backend used by
Horde/Kolab. For SyncML any storage changes need to get logged in order to be
exchanged with the mobile clients.

Currently the Kolab drivers within Horde will create the necessary changelog.
But this currently only happens after Synchronization started. Which means that
you need to sync twice in order to get changes from an external client if you
did not log in via Horde after changing something with an external client.

The attached patch has been provided by Univention but needs some cleanup to go
in upstream. We mainly need a clean library call in the Horde application
libraries that will be called for synchronization.

REF: https://issues.kolab.org/issue3237

Combined two patches here which was kind of a mistake but it does not
matter right now. Will be pulled apart once we move away from
horde-webmail-1.2.0.

Signed-off-by: root <Gunnar Wrobel wrobel@pardus.de>

---
 horde-webmail/kronolith/lib/api.php             |   37 ++
 horde-webmail/lib/Horde/Kolab/Storage/Data.php  |    8 +
 horde-webmail/lib/Horde/Kolab/Storage/Data.php~ |  656 +++++++++++++++++++++++
 horde-webmail/lib/SyncML/Backend/Horde.php      |    9 +-
 horde-webmail/lib/SyncML/Command/Alert.php      |   11 +
 horde-webmail/mnemo/lib/api.php                 |   37 ++
 horde-webmail/nag/lib/api.php                   |   34 ++
 horde-webmail/turba/lib/api.php                 |   51 ++
 8 files changed, 841 insertions(+), 2 deletions(-)

diff --git a/horde-webmail/kronolith/lib/api.php b/horde-webmail/kronolith/lib/api.php
index 202b85e..1450bb1 100644
--- a/horde-webmail/kronolith/lib/api.php
+++ b/horde-webmail/kronolith/lib/api.php
@@ -126,6 +126,11 @@ $_services['unsubscribe'] = array(
     'type' => 'boolean',
 );
 
+$_services['synchronize'] = array(
+    'args' => array(),
+    'type' => 'boolean'
+);
+
 /**
  * Returns a list of available permissions.
  *
@@ -1422,3 +1427,35 @@ function _kronolith_unsubscribe($calendar)
         return PEAR::raiseError('Unknown calendar specification');
     }
 }
+
+/**
+ * Synchronizes kronolith with the IMAP backend
+ *
+ * @return boolean  False if something went wrong
+ */
+function _kronolith_synchronize()
+{
+    require_once dirname(__FILE__) . '/base.php';
+    global $kronolith_driver;
+
+    $calendar = Kronolith::getDefaultCalendar();
+
+    if (!array_key_exists($calendar,
+                          Kronolith::listCalendars(false, PERMS_READ))) {
+        return False;
+    }
+
+    $kronolith_driver->open($calendar);
+
+    if (get_class ($kronolith_driver) == 'Kronolith_Driver_kolab' &&
+        get_class ($kronolith_driver->_wrapper) == 'Kronolith_Driver_kolab_wrapper_new') {
+
+        $kronolith_driver->_wrapper->synchronize (true);
+
+        if (get_class ($kronolith_driver->_wrapper->_store) == 'Kolab_IMAP') {
+            $kronolith_driver->_wrapper->_store->_synchronize ();
+        }
+    }
+
+    return True;
+}
diff --git a/horde-webmail/lib/Horde/Kolab/Storage/Data.php b/horde-webmail/lib/Horde/Kolab/Storage/Data.php
index 213d1f2..6d047eb 100644
--- a/horde-webmail/lib/Horde/Kolab/Storage/Data.php
+++ b/horde-webmail/lib/Horde/Kolab/Storage/Data.php
@@ -457,6 +457,14 @@ class Kolab_Data {
         $history = &Horde_History::singleton();
 
         $history_id = $app . ':' . $this->_folder->getShareId() . ':' . $object_uid;
+
+        // entries that should be added to the history MUST not
+        // have an existing entry in the history!! otherwise
+        // they are just marked as "modified"
+        if ($action == 'add' && $history->getActionTimestamp($history_id, 'add') == 0) {
+            $action = 'modify';
+        }
+
         $history->log($history_id, array('action' => $action, 'ts' => $mod_ts), true);
     }
 
diff --git a/horde-webmail/lib/SyncML/Backend/Horde.php b/horde-webmail/lib/SyncML/Backend/Horde.php
index ed07580..0f35941 100644
--- a/horde-webmail/lib/SyncML/Backend/Horde.php
+++ b/horde-webmail/lib/SyncML/Backend/Horde.php
@@ -183,7 +183,12 @@ class SyncML_Backend_Horde extends SyncML_Backend {
                 continue;
             }
 
-            if ($slowsync) {
+            // Add should only be done once on an existing entry -
+            // if it's performed a second time it's very likely that
+            // there is something wrong. Therefore all adds are
+            // filtered that already have a corresponding mapping in
+            // the database
+            //if ($slowsync) {
                 // SlowSync: Ignore all entries where there already in a
                 // map entry.
                 $cuid = $this->_getCuid($database, $suid);
@@ -193,7 +198,7 @@ class SyncML_Backend_Horde extends SyncML_Backend {
                         __FILE__, __LINE__, PEAR_LOG_DEBUG);
                     continue;
                 }
-            }
+            //}
             $add_ts[$suid] = $registry->call($database . '/getActionTimestamp',
                                              array($suid, 'add', SyncML_Backend::getParameter($databaseURI, 'source')));
             $sync_ts = $this->_getChangeTS($database, $suid);
diff --git a/horde-webmail/lib/SyncML/Command/Alert.php b/horde-webmail/lib/SyncML/Command/Alert.php
index 0b004f6..6f4aa5b 100644
--- a/horde-webmail/lib/SyncML/Command/Alert.php
+++ b/horde-webmail/lib/SyncML/Command/Alert.php
@@ -287,6 +287,17 @@ class SyncML_Command_Alert extends SyncML_Command {
                 'Creating SyncML_Sync object for database '
                 . $this->_targetLocURI .  '; sync type ' . $synctype,
                 __FILE__, __LINE__, PEAR_LOG_DEBUG);
+            /* Synchronize databases with the IMAP backend */
+            $databases = array ('kronolith', 'turba', 'nag', 'mnemo');
+            foreach($databases as $app) {
+                $GLOBALS['registry']->callByPackage($app, 'synchronize');
+            }
+            if ($serverAnchorNext == time ()) {
+                // make sure that the timestamps of the synchronized items in
+                // the database are different from serverAnchorNext
+                sleep (1);
+            }
+            $serverAnchorNext = $GLOBALS['backend']->getCurrentTimeStamp();
             $sync = new SyncML_Sync($synctype,
                                     $this->_targetLocURI,
                                     $this->_sourceLocURI,
diff --git a/horde-webmail/mnemo/lib/api.php b/horde-webmail/mnemo/lib/api.php
index 05c28c6..c8bc4ed 100644
--- a/horde-webmail/mnemo/lib/api.php
+++ b/horde-webmail/mnemo/lib/api.php
@@ -70,6 +70,11 @@ $_services['replace'] = array(
     'type' => 'boolean'
 );
 
+$_services['synchronize'] = array(
+    'args' => array(),
+    'type' => 'boolean'
+);
+
 /**
  * Returns a list of available permissions.
  *
@@ -526,3 +531,35 @@ function _mnemo_replace($uid, $content, $contentType)
         return PEAR::raiseError(sprintf(_("Unsupported Content-Type: %s"),$contentType));
     }
 }
+
+/**
+ * Synchronizes mnemo with the IMAP backend
+ *
+ * @return boolean  False if something went wrong
+ */
+function _mnemo_synchronize()
+{
+    require_once dirname(__FILE__) . '/base.php';
+
+    /* Make sure we have a valid notepad. */
+    if (empty($notepad)) {
+        $notepad = Mnemo::getDefaultNotepad();
+    }
+
+    if (!array_key_exists($notepad,
+                          Mnemo::listNotepads(false, PERMS_READ))) {
+        return False;
+    }
+
+    $storage = &Mnemo_Driver::singleton($notepad);
+    if (get_class ($storage) == 'Mnemo_Driver_kolab' &&
+        get_class ($storage->_wrapper) == 'Mnemo_Driver_kolab_wrapper_new') {
+
+        $storage->_wrapper->connect ();
+        if (get_class ($storage->_wrapper->_store) == 'Kolab_IMAP') {
+            $storage->_wrapper->_store->_synchronize ();
+        }
+    }
+
+    return True;
+}
diff --git a/horde-webmail/nag/lib/api.php b/horde-webmail/nag/lib/api.php
index db77df3..f67d3b4 100644
--- a/horde-webmail/nag/lib/api.php
+++ b/horde-webmail/nag/lib/api.php
@@ -113,6 +113,11 @@ $_services['listTimeObjects'] = array(
     'type' => '{urn:horde}hashHash'
 );
 
+$_services['synchronize'] = array(
+    'args' => array(),
+    'type' => 'boolean'
+);
+
 /**
  * Returns a list of available permissions.
  *
@@ -1386,3 +1391,32 @@ function _nag_listAlarms($time, $user = null)
 
     return $alarm_list;
 }
+
+/**
+ * Synchronizes nag with the IMAP backend
+ *
+ * @return boolean  False if something went wrong
+ */
+function _nag_synchronize()
+{
+    require_once dirname(__FILE__) . '/base.php';
+
+    $tasklist = Nag::getDefaultTasklist(PERMS_READ);
+
+    if (!array_key_exists($tasklist,
+                          Nag::listTasklists(false, PERMS_READ))) {
+        return False;
+    }
+
+    $storage = &Nag_Driver::singleton($tasklist);
+    if (get_class ($storage) == 'Nag_Driver_kolab' &&
+        get_class ($storage->_wrapper) == 'Nag_Driver_kolab_wrapper_new') {
+
+        $storage->_wrapper->connect ();
+        if (get_class ($storage->_wrapper->_store) == 'Kolab_IMAP') {
+            $storage->_wrapper->_store->_synchronize ();
+        }
+    }
+
+    return True;
+}
diff --git a/horde-webmail/turba/lib/api.php b/horde-webmail/turba/lib/api.php
index b4d18d1..c636653 100644
--- a/horde-webmail/turba/lib/api.php
+++ b/horde-webmail/turba/lib/api.php
@@ -188,6 +188,11 @@ $_services['hasComments'] = array(
     'type' => 'boolean'
 );
 
+$_services['synchronize'] = array(
+    'args' => array(),
+    'type' => 'boolean'
+);
+
 /**
  * Removes user data.
  *
@@ -1967,3 +1972,49 @@ function _turba_deleteField($address = '', $field = '', $sources = array())
 
     return;
 }
+
+/**
+ * Synchronizes turba with the IMAP backend
+ *
+ * @return boolean  False if something went wrong
+ */
+function _turba_synchronize()
+{
+    global $prefs, $cfgSources;
+    require_once dirname(__FILE__) . '/base.php';
+
+    /* Get default address book from user preferences. */
+    if (empty($sources)) {
+        $sources = @unserialize($prefs->getValue('sync_books'));
+    } elseif (!is_array($sources)) {
+        $sources = array($sources);
+    }
+    if (empty($sources)) {
+        $sources = array(Turba::getDefaultAddressbook());
+    }
+    if (empty($sources)) {
+        return False;
+    }
+
+    foreach ($sources as $source) {
+        if (empty($source) || !isset($cfgSources[$source])) {
+            continue;
+        }
+
+        $driver = &Turba_Driver::singleton($source);
+        if (is_a($driver, 'PEAR_Error')) {
+            continue;
+        }
+        if (get_class ($driver) == 'Turba_Driver_share' &&
+            get_class ($driver->_driver) == 'Turba_Driver_kolab' &&
+            get_class ($driver->_driver->_wrapper) == 'Turba_Driver_kolab_wrapper_new') {
+
+            $driver->_driver->_wrapper->connect ();
+            if (get_class ($driver->_driver->_wrapper->_store) == 'Kolab_IMAP') {
+                $driver->_driver->_wrapper->_store->_synchronize ();
+            }
+        }
+    }
+
+    return True;
+}
-- 
tg: (e3872ce..) t/SyncML/HK/GW/DoubleSyncFix (depends on: t/kronolith/HK/GW/HandleEmptyDates)
-- 
TOPGIT patch commit log
=======================

commit 50acb8e9fc046da7aebbedf53ef155f03427c41b
Author: root <Gunnar Wrobel wrobel@pardus.de>
Date:   Tue Nov 24 10:25:51 2009 +0100

    Fix patch for newer Kolab_Storage library.

commit 3ea975a913f3db5ee5ee511cf4280eb811f23c91
Author: root <Gunnar Wrobel wrobel@pardus.de>
Date:   Tue Nov 24 09:48:03 2009 +0100

    Remove stray file.

commit 308c073c0765af8979d1c511201f99f8d1b88046
Author: root <Gunnar Wrobel wrobel@pardus.de>
Date:   Tue Nov 24 09:47:17 2009 +0100

     kolab/issue3237 (Double Sync with SyncML when using external client)

commit a24c1cd0702833a1fa658b58bddb67971250f86d
Author: root <Gunnar Wrobel wrobel@pardus.de>
Date:   Tue Nov 24 09:41:07 2009 +0100

     kolab/issue3237 (Double Sync with SyncML when using external client)
